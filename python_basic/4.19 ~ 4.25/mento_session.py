"""
멘토세션 1

자료 구조의 실무 활용

- 자료구조의 구현 방법은 주로 효율성과 유연함의 Trade-Off 관계가 있다.
ex)
- Array
    - 효율성
    - 퍼포먼스
    - 임베디드
    - Low-level

- Node
    - 유연함
    - 편리함
    - 라이브러리
    - High-Level
"""

"""
멘토세션 2

재귀 호출의 확실한 이해

"""
# 재귀호출을 이용한 팩토리얼 계산 -> n!과 (n-1)!의 관계를 서술
def factorial_recur(x):
    return 1 if x == 0 else factorial_recur(x - 1) * x

# 반복문을 이용한 팩토리얼 계산 -> n!을 구하는 과정 전체를 서술
def factorial_iter(x):
    answer = 1
    for i in range(1, x + 1):
        answer *= i
    return answer

# 재귀호출로 구현하는 것이 필수는 아니다. 오히려 반복문으로 구현하는 법도 알아야 한다.
# 재귀적 구현은 코드에 부분만 적혀 있고, 반복적 구현은 코드에 모든 것이 적혀 있는 점이 다르다.


"""
1. 재귀 함수 구현
    - 점화식 구현
    - 시작/종료 조건

+ 동적 계획법

2. 반복적 구현
    - 재귀 호출 제거
    - 동적 계획법

+ 수학 이론

3. 구현 최적화
    - 불필요한 반복 제거

-> 사실 재귀 함수로 구현하는 것은 이들 중 최약체였던 것
"""